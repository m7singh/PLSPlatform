//
// The following code is generated by CodeBreeze
// DO NOT modify this code module manually - make customizations to the derived class or classes.
// 
using MongoDB.Driver;
using System;
using System.Configuration;
using System.Data;

namespace IDesign.Data
{
    /// <summary>
    /// This class inherits from the common DAL and adds the encapsulation of each stored procedure in the database.
    /// Each method receives the stored procedure parameters as method arguments and builds the appropriate ADO.NET code to perform the data operations.
    /// </summary>
    public partial class DataAccess : IDesign.Core.Data.DalBase
	{
        #region Constructors

        /// <summary>
        /// This is the default constructor and retrieves a connection string from the configuration file.
        /// </summary>
        public DataAccess()
            : base("mainConnStr") { }

        #endregion

        #region Stored procedures

        IMongoQuery

        /// <summary>
        /// Method encapsulates all data access code for the 'StateDelete' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader StateDelete(Int32 id)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_Id", id) as IDataParameter
			};

			return GetReader("StateDelete", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'StateGetAll' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader StateGetAll()
		{

			return GetReader("StateGetAll", CommandType.StoredProcedure);
		}

        /// <summary>
        /// Method encapsulates all data access code for the 'StateGetByAbbrev' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader StateGetByAbbrev(string abbreviation)
        {
            IDataParameter[] parameters =
			{
				GetParameter("@p_Abbreviation", abbreviation) as IDataParameter
			};

            return GetReader("StateGetByAbbrev", CommandType.StoredProcedure, parameters);
        }

        /// <summary>
        /// Method encapsulates all data access code for the 'StateGetById' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader StateGetById(Int32 id)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_Id", id) as IDataParameter
			};

			return GetReader("StateGetById", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'StateInsert' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader StateInsert(string abbreviation, string name, bool isPrimaryState)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_Abbreviation", abbreviation) as IDataParameter,
				GetParameter("@p_Name", name) as IDataParameter,
				GetParameter("@p_IsPrimaryState", isPrimaryState) as IDataParameter
			};

			return GetReader("StateInsert", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'StateUpdate' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader StateUpdate(Int32 id, string abbreviation, string name, bool isPrimaryState)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_Id", id) as IDataParameter,
				GetParameter("@p_Abbreviation", abbreviation) as IDataParameter,
				GetParameter("@p_Name", name) as IDataParameter,
				GetParameter("@p_IsPrimaryState", isPrimaryState) as IDataParameter
			};

			return GetReader("StateUpdate", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'ZipCodeDelete' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader ZipCodeDelete(Int32 id)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_Id", id) as IDataParameter
			};

			return GetReader("ZipCodeDelete", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'ZipCodeGetAll' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader ZipCodeGetAll()
		{

			return GetReader("ZipCodeGetAll", CommandType.StoredProcedure);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'ZipCodeGetById' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader ZipCodeGetById(Int32 id)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_Id", id) as IDataParameter
			};

			return GetReader("ZipCodeGetById", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'ZipCodeGetByState' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader ZipCodeGetByState(string state)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_State", state) as IDataParameter
			};

			return GetReader("ZipCodeGetByState", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'ZipCodeGetByZip' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader ZipCodeGetByZip(string zip)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_Zip", zip) as IDataParameter
			};

			return GetReader("ZipCodeGetByZip", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'ZipCodeGetCountiesByState' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader ZipCodeGetCountiesByState(string state)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_State", state) as IDataParameter
			};

			return GetReader("ZipCodeGetCountiesByState", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'ZipCodeGetWithinRange' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader ZipCodeGetWithinRange(string zip, double miles)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_Zip", zip) as IDataParameter,
				GetParameter("@p_Miles", miles) as IDataParameter
			};

			return GetReader("ZipCodeGetWithinRange", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'ZipCodeInsert' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader ZipCodeInsert(string city, string county, string state, double areaCode, double fips, string timeZone, string dst, double latitude, double longitude, string zip)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_City", city) as IDataParameter,
				GetParameter("@p_County", county) as IDataParameter,
				GetParameter("@p_State", state) as IDataParameter,
				GetParameter("@p_AreaCode", areaCode) as IDataParameter,
				GetParameter("@p_Fips", fips) as IDataParameter,
				GetParameter("@p_TimeZone", timeZone) as IDataParameter,
				GetParameter("@p_Dst", dst) as IDataParameter,
				GetParameter("@p_Latitude", latitude) as IDataParameter,
				GetParameter("@p_Longitude", longitude) as IDataParameter,
				GetParameter("@p_Zip", zip) as IDataParameter
			};

			return GetReader("ZipCodeInsert", CommandType.StoredProcedure, parameters);
		}

		
        /// <summary>
        /// Method encapsulates all data access code for the 'ZipCodeUpdate' stored procedure.
        /// Arguments all correspond to stored procedure parameters.
        /// </summary>
        /// <Returns>A provider-specific implementation of the IDataReader interface (i.e. SqlDataReader, OleDbDataReader, etc).</Returns>
        public IDataReader ZipCodeUpdate(Int32 id, string city, string county, string state, double areaCode, double fips, string timeZone, string dst, double latitude, double longitude, string zip)
		{
			IDataParameter[] parameters =
			{
				GetParameter("@p_Id", id) as IDataParameter,
				GetParameter("@p_City", city) as IDataParameter,
				GetParameter("@p_County", county) as IDataParameter,
				GetParameter("@p_State", state) as IDataParameter,
				GetParameter("@p_AreaCode", areaCode) as IDataParameter,
				GetParameter("@p_Fips", fips) as IDataParameter,
				GetParameter("@p_TimeZone", timeZone) as IDataParameter,
				GetParameter("@p_Dst", dst) as IDataParameter,
				GetParameter("@p_Latitude", latitude) as IDataParameter,
				GetParameter("@p_Longitude", longitude) as IDataParameter,
				GetParameter("@p_Zip", zip) as IDataParameter
			};

			return GetReader("ZipCodeUpdate", CommandType.StoredProcedure, parameters);
		}

				#endregion

    }
}
